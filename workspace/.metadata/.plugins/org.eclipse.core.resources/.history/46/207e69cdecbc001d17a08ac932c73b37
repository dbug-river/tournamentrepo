package com.rivertech.controller;


import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rivertech.model.Game;
import com.rivertech.repositories.TournamentRepository;

@RestController
@RequestMapping("/api/tournament")
public class TournamentController {
	
	/* Add a logger to the controller class */
	final Logger logger = LoggerFactory.getLogger(TournamentController.class);
	
	/* Environment variable to access the application properties */
	@Autowired
	private Environment env;
	

	@GetMapping("/topcountgames")
    public ResponseEntity<List<Game>> findTopGamesByRound(@RequestParam int total) {
		
		/* Return object data */
		List<Game> games = new ArrayList<Game>();
		HttpStatus status = HttpStatus.OK;
		
		try {
			/* Create a tournament repository */
			TournamentRepository repo = new TournamentRepository(env.getProperty("database.url"),
					env.getProperty("database.user"), env.getProperty("database.password"));
			
			/* Get game by ID */
			games = repo.getTopGamesByCount(total);
			
			/* Return not found error if game ID does not exist */
			if(games.isEmpty())
				status = HttpStatus.NOT_FOUND;
			
		} catch (Exception e) {
			status = HttpStatus.INTERNAL_SERVER_ERROR;
			logger.error(e.getMessage());
		}
		
		return new ResponseEntity<List<Game>>(games, status);
    }
	
	/***
	 * Get a game from the game dimension.
	 * @param id The game id.
	 * @return A Game entity representing a game dimension row.
	 */
	@GetMapping("/game")
    public ResponseEntity<Game> findGameById(@RequestParam int id) {
		
		/* Return object data */
		Game game = null;
		HttpStatus status = HttpStatus.OK;
		
		try {
			/* Create a tournament repository */
			TournamentRepository repo = new TournamentRepository(env.getProperty("database.url"),
					env.getProperty("database.user"), env.getProperty("database.password"));
			
			/* Get game by ID */
			game = repo.getGameById(id);
			
			/* Return not found error if game ID does not exist */
			if(game == null)
				status = HttpStatus.NOT_FOUND;
			
		} catch (Exception e) {
			status = HttpStatus.INTERNAL_SERVER_ERROR;
			logger.error(e.getMessage());
		}
		
		return new ResponseEntity<Game>(game, status);
    }
	
}
