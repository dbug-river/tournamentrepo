package com.rivertech.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rivertech.console.EtlConsole;
import com.rivertech.model.Game;
import com.rivertech.model.Timeslot;
import com.rivertech.repositories.TournamentRepository;

import ch.qos.logback.classic.net.LoggingEventPreSerializationTransformer;

@RestController
@RequestMapping("/api/tournament")
public class TournamentController {
	
	final Logger logger = LoggerFactory.getLogger(TournamentController.class);
	
	@Autowired
	private Environment env;
	
	/***
	 * Get list of schedules from the database.
	 * @return
	 */
	@GetMapping("/timeslots")
    public List<Timeslot> findAllTimeslots() {
		TournamentRepository repo = new TournamentRepository(env.getProperty("database.url"),
				env.getProperty("database.user"), env.getProperty("database.password"));
		return repo.getAllSchedules();	
    }
	
	
	@GetMapping("/game")
    public ResponseEntity<Game> findGameById(@RequestParam int id) {
		
		/* Return object data */
		Game game = null;
		HttpStatus status = HttpStatus.OK;
		
		try {
			/* Create a tournament repository */
			TournamentRepository repo = new TournamentRepository(env.getProperty("database.url"),
					env.getProperty("database.user"), env.getProperty("database.password"));
			
			/* Get game by ID */
			game = repo.getGameById(id);
			
			/* Return not found error if game ID does not exist */
			if(game == null)
				status = HttpStatus.NOT_FOUND;
			
		} catch (Exception e) {
			status = HttpStatus.INTERNAL_SERVER_ERROR;
			logger.error(e.getMessage());
		}
		
		return new ResponseEntity<Game>(game, status);
    }
	
}
