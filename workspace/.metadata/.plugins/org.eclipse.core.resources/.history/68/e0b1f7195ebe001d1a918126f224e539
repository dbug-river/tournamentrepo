package com.rivertech.repositories;

import java.sql.Array;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.rivertech.model.Game;
import com.rivertech.model.TournamentSession;

/***
 * Repository that exposes the required methods to allow the API
 * to access tournament data from the data warehouse.
 * @author Omar Zammit
 *
 */
public class TournamentRepository extends AbstractRepository {

	/* Add a logger to the controller class */
	final Logger logger = LoggerFactory.getLogger(TournamentRepository.class);

	public TournamentRepository(String url, String username, String password) {
		super(url, username, password);
	}
	
	/***
	 * Get the games that have the top rounds and their top players.
	 * @return List of tournament sessions sorted by rounds
	 */
	public List<TournamentSession> getTournamentSessionByRound(){
	
		/* Create a connection to the database */
		Connection connection = null;
		List<TournamentSession> sessions = new ArrayList<TournamentSession>();

		try {
			connection = this.GetConnection();

			/* Query to get top rounds */
			String query = """
							SELECT
								vwr.game_id,
								vwr.game_name,
								vwr.provider,
								groupArray(vwr.user_id) AS users
							FROM(
								SELECT
									game_id,
									game_name,
									provider,
									user_id,
									rounds,
									round_ranking
								FROM VW_UserRankings
								WHERE round_ranking <=10
							) AS vwr
							GROUP BY
								vwr.game_id,
								vwr.game_name,
								vwr.provider
							HAVING
								COUNT(vwr.user_id) = 10
							ORDER BY 
								SUM(vwr.rounds) DESC LIMIT 8;""";
			/* Execute query */
			PreparedStatement ps = connection.prepareStatement(query);
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				TournamentSession session = new TournamentSession();
				session.gameId = rs.getInt("game_id");
				session.gameName = rs.getString("game_name");
				session.provider = rs.getString("provider");
				session.users = (String[]) rs.getArray("users").getArray();
				sessions.add(session);
			}

		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		/* Return a game even if it is null */
		return sessions;
	}
	
	/***
	 * Get the games that have the top rounds and their top players.
	 * @return List of tournament sessions sorted by rounds
	 */
	public List<TournamentSession> getTournamentSessionByBetAmount(){
	
		/* Create a connection to the database */
		Connection connection = null;
		List<TournamentSession> sessions = new ArrayList<TournamentSession>();

		try {
			connection = this.GetConnection();

			/* Query to get top rounds */
			String query = """
							SELECT
								vwr.game_id,
								vwr.game_name,
								vwr.provider,
								groupArray(vwr.user_id) AS users
							FROM(
								SELECT
									game_id,
									game_name,
									provider,
									user_id,
									bet_amount,
									bet_amount_ranking
								FROM VW_UserRankings
								WHERE bet_amount_ranking <=10
							) AS vwr
							GROUP BY
								vwr.game_id,
								vwr.game_name,
								vwr.provider
							HAVING
								COUNT(vwr.user_id) = 10
							ORDER BY 
								SUM(vwr.bet_amount) DESC LIMIT 8""";
			
			/* Execute query */
			PreparedStatement ps = connection.prepareStatement(query);
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				TournamentSession session = new TournamentSession();
				session.gameId = rs.getInt("game_id");
				session.gameName = rs.getString("game_name");
				session.provider = rs.getString("provider");
				session.users = (String[]) rs.getArray("users").getArray();
				sessions.add(session);
			}

		} catch (Exception e) {
			logger.error(e.getMessage());
		}
		/* Return a game even if it is null */
		return sessions;
	}
	
	/***
	 * Get top games based on their bet amount.
	 * A game should be eligible only if 10 or more players played the game.
	 * @param total The top number of games to retrieve.
	 * @return List of games by bet amount.
	 */
	public List<Game> getTopGamesByAmount(int total){
		/* Create a connection to the database */
		Connection connection = null;
		List<Game> games = new ArrayList<Game>();

		try {
			connection = this.GetConnection();

			/* Query to get the game from the database */
			String query = """
					SELECT 
						game_id,
						game_name,
						provider
					FROM 
						VW_UserRankings vur
					ORDER BY 
						bet_amount DESC
					LIMIT ?
					""";
			
			System.out.println(query);

			/* Execute query */
			PreparedStatement ps = connection.prepareStatement(query);
			ps.setInt(1, total);
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				Game game = new Game();
				game.gameId = rs.getInt("game_id");
				game.gameName = rs.getString("game_name");
				game.provider = rs.getString("provider");
				games.add(game);
			}

		} catch (Exception e) {
			logger.error(e.getMessage());
		}

		/* Return a game even if it is null */
		return games;
	}
	
	/***
	 * Get top games based on their round count.
	 * A game should be eligible only if 10 or more players played the game.
	 * @param total The top number of games to retrieve.
	 * @return List of games by round count.
	 */
	public List<Game> getTopGamesByCount(int total){
		/* Create a connection to the database */
		Connection connection = null;
		List<Game> games = new ArrayList<Game>();

		try {
			connection = this.GetConnection();

			/* Query to get the game from the database */
			String query = """
					SELECT 
						game_id,
						game_name,
						provider
					FROM 
						VW_UserRankings vur
					ORDER BY 
						rounds DESC
					LIMIT ?
					""";
			
			System.out.println(query);

			/* Execute query */
			PreparedStatement ps = connection.prepareStatement(query);
			ps.setInt(1, total);
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				Game game = new Game();
				game.gameId = rs.getInt("game_id");
				game.gameName = rs.getString("game_name");
				game.provider = rs.getString("provider");
				games.add(game);
			}

		} catch (Exception e) {
			logger.error(e.getMessage());
		}

		/* Return a game even if it is null */
		return games;
	}
	
	/***
	 * Get a game instance from the game dimension.
	 * 
	 * @param id The game ID to search.
	 * @return A game instance or NULL if the game is not found.
	 */
	public Game getGameById(int id) {
		/* Create a connection to the database */
		Connection connection = null;
		Game game = null;

		try {
			connection = this.GetConnection();

			/* Query to get the game from the database */
			String query = "SELECT game_id, game_name, provider FROM DW_GameDimension WHERE game_id = ?";

			/* Execute query */
			PreparedStatement ps = connection.prepareStatement(query);
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();

			/* Map row fields to game object */
			if (rs.next()) {
				game = new Game();
				game.gameId = rs.getInt("game_id");
				game.gameName = rs.getString("game_name");
				game.provider = rs.getString("provider");
			}

		} catch (Exception e) {
			logger.error(e.getMessage());
		}

		/* Return a game even if it is null */
		return game;
	}

}
